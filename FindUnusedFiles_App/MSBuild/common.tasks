<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    http://blog.3d-logic.com/2012/10/16/msbuild-zip-task-without-external-dependencies/
    -->
  <UsingTask TaskName="CodeSign" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <Task>
      <Reference Include="Microsoft.VisualBasic" />
      <Using Namespace="Microsoft.VisualBasic" />
      <Using Namespace="System.Diagnostics" />
      <Code Type="Fragment" Language="cs">
      <![CDATA[
	    string password = Microsoft.VisualBasic.Interaction.InputBox("Enter the certificate password, or click cancel to continue without signing", "Code-Signing", "", -1, -1);
	    if (!string.IsNullOrEmpty(password))
	    {
		    var cmd = string.Format(@"sign /f ""E:\Program Data\ImpSauve\certificates\code-signing.pfx"" /p {0} /t http://time.certum.pl ..\bin\Release\FindUnusedFiles.exe", password);

		    var p = System.Diagnostics.Process.Start(@"C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Bin\signtool.exe", cmd);
		    p.WaitForExit();
	    }
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="Zip" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <InputFileNames ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <OutputFileName ParameterType="System.String" Required="true" />
      <OverwriteExistingFile ParameterType="System.Boolean" Required="false" />
	</ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
      <![CDATA[
        var fileMode = OverwriteExistingFile ? FileMode.Create : FileMode.CreateNew;
        using (var archive = new ZipArchive(new FileStream(OutputFileName, fileMode), ZipArchiveMode.Create))
        {
            foreach (var inputFileName in InputFileNames.Select(f => f.ItemSpec))
            {
                var archiveEntry = archive.CreateEntry(Path.GetFileName(inputFileName));
                using (var fs = new FileStream(inputFileName, FileMode.Open))
                {
                    using (var zipStream = archiveEntry.Open())
                    {
                        fs.CopyTo(zipStream);
                    }
                }
            }
        }
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="ZipDir" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <InputBaseDirectory ParameterType="System.String" Required="true" />
      <OutputFileName ParameterType="System.String" Required="true" />
      <OverwriteExistingFile ParameterType="System.Boolean" Required="false" />
      <IncludeBaseDirectory ParameterType="System.Boolean" Required="false" />
	</ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression" />
      <Reference Include="System.IO.Compression.FileSystem" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
      <![CDATA[
        if (File.Exists(OutputFileName))
        {
            if (!OverwriteExistingFile)
            {
                return false;
            }
            File.Delete(OutputFileName);
        }
        ZipFile.CreateFromDirectory
        (
            InputBaseDirectory, OutputFileName,
            CompressionLevel.Optimal, IncludeBaseDirectory
        );
      ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
